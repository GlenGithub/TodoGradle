
//对所有项目配置java插件
allprojects {
    apply plugin: 'java'
    sourceCompatibility = 1.8

    //Maven 提供了一个maven-publish插件
    apply plugin: 'maven-publish'

    publishing{
        publications{
            myPublish(MavenPublication){
                from components.java
            }
        }

        repositories{
            maven{
                name "myrepo"
                url ""
            }

        }

    }

}

//所有子项目配置相同的库
subprojects {
    repositories {
        mavenCentral()
    }

    dependencies{
        compile 'ch.qos.logback:logback-classic:1.2.1'
        testCompile group: 'junit', name: 'junit', version: '4.12'
    }

}

//查看依赖报告
configurations.all {
    resolutionStrategy{
        failOnVersionConflict()
        //强制一个版本
        force 'org.slf4j:slf4j-api:1.7.24'
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

dependencies {
    compile ('org.hibernate:hibernate-core:3.6.3.Final'){
        //排除传递性依赖
        exclude group:'org.slf4j',module:'slf4j-api'
    }

}

//创建一个闭包
def createDir = {
    path ->  //方法体
         File dir = new File(path)
         if(!dir.exists()){
             dir.mkdirs()
         }
}

//自定义一个任务
task makeJavaDir(){
    def paths = ['src/main/java','src/main/resources','src/test/java','src/test/resources']
    //添加一个动作
    doFirst{
        paths.forEach(createDir)
    }
}

task makeWebDir(){
    // 依赖makeJavaDir任务
    dependsOn 'makeJavaDir'

    def paths = ['src/main/webapp','src/test/webapp']
    //添加一个动作
    doLast{
        paths.forEach(createDir)
    }
}


//gradle 生命周期 初始化，配置，执行，相对应的3个hook方法
//1 init
gradle.beforeProject {
    project ->
        println('init')
}
//2 config
gradle.taskGraph.whenReady {
    graph ->
        println('config')
}
//3 execute
gradle.buildFinished {
    result ->
        println('result')
}

//依赖管理
//工件坐标（jar） ==> group:name:verison
//常用仓库     mavenLocal/mavenCentral/jcenter
//自定义仓库(maven 私服)
//文件仓库  路径

//依赖传递性 B依赖A C依赖B 那么C依赖A （导致容易出现版本冲突）

//依赖阶段配置;
// compile,runtime,testCompile,testRuntime



//由于依赖导致版本冲突 ，gradle默认最高版本解决方法：
//1 查看依赖报告

//configurations.all {
//    resolutionStrategy{
//        failOnVersionConflict()
//    }
//}

//2 排除传递性依赖

//compile('org.hibernate:hibernate-core:3.6.3.Final'){
//    exclude group: "orog.slf4j",module:"slf4j-api"
//}


//3 强制一个版本
//configurations.all {
//    resolutionStrategy{
//        force 'org.slf4j:slf4j-api:1.7.24'
//    }
//}

//发布到本地或远程仓库




